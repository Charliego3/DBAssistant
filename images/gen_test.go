package images

import (
	"embed"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

//go:generate go test -run TestGenerate

//go:embed *
var assets embed.FS

func TestGenerate(t *testing.T) {
	entry, err := assets.ReadDir(".")
	if err != nil {
		panic(err)
	}

	var funcs, vars []string
	for _, e := range entry {
		ext := filepath.Ext(e.Name())
		if strings.EqualFold(ext, ".go") || e.Name()[0] == '.' {
			continue
		}

		name := strings.TrimSuffix(e.Name(), ext)
		name = cases.Title(language.English).String(name)
		vars = append(vars, fmt.Sprintf("\t//go:embed %s\n\t%sData []byte", e.Name(), name))
		funcs = append(funcs,
			fmt.Sprintf("func %s() appkit.Image {\n\treturn appkit.NewImageWithData(%sData)\n}", name, name),
			fmt.Sprintf("func %sView() appkit.ImageView {\n\treturn appkit.ImageView_ImageViewWithImage(%s())\n}", name, name),
		)
	}

	f, _ := os.OpenFile("images.go", os.O_CREATE|os.O_WRONLY, os.ModePerm)
	f.WriteString("// Code generated by images. DO NOT EDIT.\n\n")
	f.WriteString("package images\n\n")
	f.WriteString("import (\n")
	f.WriteString("\t_ \"embed\"\n\n")
	f.WriteString("\t\"github.com/progrium/macdriver/macos/appkit\"\n")
	f.WriteString(")\n\n")
	f.WriteString("var (\n")
	f.WriteString(strings.Join(vars, "\n\n"))
	f.WriteString("\n)\n\n")
	f.WriteString(strings.Join(funcs, "\n\n"))
	_ = f.Close()
}
